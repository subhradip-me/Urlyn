version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: urlyn-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-urlyn_admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-your_secure_password}
      MONGO_INITDB_DATABASE: urlyn
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - urlyn-network

  # Backend API
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: urlyn-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5001
      HOST: 0.0.0.0
      MONGO_URI: mongodb://${MONGO_USERNAME:-urlyn_admin}:${MONGO_PASSWORD:-your_secure_password}@mongodb:27017/urlyn?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "5001:5001"
    depends_on:
      - mongodb
    volumes:
      - ./logs:/app/logs
    networks:
      - urlyn-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis (Optional - for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: urlyn-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - urlyn-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your_redis_password}

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  urlyn-network:
    driver: bridge
